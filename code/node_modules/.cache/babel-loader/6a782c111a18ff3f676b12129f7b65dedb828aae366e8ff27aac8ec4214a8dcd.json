{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibate\\\\Documents\\\\oss project\\\\open-swag-software\\\\code\\\\src\\\\pages\\\\FriendChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatBot.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FriendChatBot = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]); // Historique des messages\n  const [input, setInput] = useState(''); // Contenu de l'input\n  const chatDisplayRef = useRef(null); // Référence pour le défilement\n\n  // Défilement automatique vers le bas\n  useEffect(() => {\n    if (chatDisplayRef.current) {\n      chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Fonction pour envoyer un message à l'API Flask\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      // Ajouter le message utilisateur\n      setMessages([...messages, {\n        text: input,\n        user: true\n      }]);\n      setInput(''); // Réinitialiser le champ input\n\n      try {\n        // Requête POST vers Flask\n        const response = await fetch('http://127.0.0.1:5000/generate', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            role: 'friend',\n            // Rôle ou contexte du bot\n            prompt: input\n          })\n        });\n        const data = await response.json();\n\n        // Ajouter la réponse du bot\n        if (data.response) {\n          setMessages(prevMessages => [...prevMessages, {\n            text: data.response,\n            user: false\n          }]);\n\n          // nouvelle ligne : déclencher le text-to-speech pour la réponse du coach\n          speakCoachResponse(data.response);\n        } else if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            text: 'Error: ' + data.error,\n            user: false\n          }]);\n        }\n      } catch (error) {\n        // Gérer les erreurs de connexion et variable errorMessage ajouté pour éviter la répétition du message.\n        const errorMessage = '오류가 발생했습니다: 서버에 연결할 수 없습니다.'; //'connexion sans succès' //Error: Unable to connect to the server.\n        setMessages(prevMessages => [...prevMessages, {\n          text: errorMessage,\n          user: false\n        }]);\n        // Nouvelle ligne ajoutée pour tester la voix en cas d'erreur : Speak the error message\n        speakCoachResponse(errorMessage);\n      }\n    }\n  };\n\n  // Gestion de la touche \"Entrée\" pour envoyer un message\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  // nouvelles fonctions pour le text-to-speech\n\n  // fonction pour détecter la langue utilisée par la réponse générée\n  const detectLanguage = text => {\n    if (/[\\u3131-\\uD79D]/.test(text)) return 'ko-KR'; // pour reconnaître le coréen\n    if (/\\b(le|la|les|un|une|des|je|tu|il|elle|nous|vous|ils|elles|et|est|sont|pas|pour|avec|sans|cette|cela|ceci|au|aux|du|de|que|qui|où|quoi|quand|comment|parce|mais|ou|donc|or|ni|car|bientôt|fête|bonjour|merci|ça)\\b|[àâçéèêëîïôûùüÿæœ]/i.test(text)) {\n      return 'fr-FR';\n    }\n    // pour reconnaître le français\n    return 'en-US'; // s'il n'y a d'autres langues configurées, mettons l'anglais par défaut\n  };\n  // fonction text-to-speech (TTS) pour la voix du coach\n  const speakCoachResponse = text => {\n    const synth = window.speechSynthesis;\n    const lang = detectLanguage(text); // appel de la fonction detectLanguage\n\n    const loadAndSpeak = () => {\n      const voices = synth.getVoices();\n      if (!voices.length) {\n        setTimeout(loadAndSpeak, 100); // Retry after 100ms if voices are not loaded\n        return;\n      }\n\n      // Filter voices by language and characteristics\n      const coachVoice = voices.find(voice => voice.lang === lang && (voice.name.toLowerCase().includes('friend') || voice.name.toLowerCase().includes('energetic'))) || voices.find(voice => voice.lang === lang) || voices[0]; // Fallback voice\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.voice = coachVoice;\n      utterance.pitch = 5.0; // High pitch for motivation\n      utterance.rate = 1.5; // Faster rate for dynamic tone\n\n      synth.speak(utterance);\n    };\n    loadAndSpeak();\n  };\n\n  // code html\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      className: \"back-button\",\n      children: \"Back to Homepage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"chatbot-title\",\n      children: \"FriendChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-display\",\n      ref: chatDisplayRef,\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.user ? 'user-message' : 'bot-message'}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        disabled: !input.trim() // Désactiver le bouton si le champ est vide\n        ,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(FriendChatBot, \"mjJC+wDY9xMEJkur+ymY1Nd+iNY=\", false, function () {\n  return [useNavigate];\n});\n_c = FriendChatBot;\nexport default FriendChatBot;\nvar _c;\n$RefreshReg$(_c, \"FriendChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","FriendChatBot","_s","navigate","messages","setMessages","input","setInput","chatDisplayRef","current","scrollTop","scrollHeight","handleSendMessage","trim","text","user","response","fetch","method","headers","body","JSON","stringify","role","prompt","data","json","prevMessages","speakCoachResponse","error","errorMessage","handleKeyPress","event","key","detectLanguage","test","synth","window","speechSynthesis","lang","loadAndSpeak","voices","getVoices","length","setTimeout","coachVoice","find","voice","name","toLowerCase","includes","utterance","SpeechSynthesisUtterance","pitch","rate","speak","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","type","value","onChange","e","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ibate/Documents/oss project/open-swag-software/code/src/pages/FriendChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatBot.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst FriendChatBot = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]); // Historique des messages\r\n  const [input, setInput] = useState(''); // Contenu de l'input\r\n  const chatDisplayRef = useRef(null); // Référence pour le défilement\r\n\r\n  // Défilement automatique vers le bas\r\n  useEffect(() => {\r\n    if (chatDisplayRef.current) {\r\n      chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fonction pour envoyer un message à l'API Flask\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      // Ajouter le message utilisateur\r\n      setMessages([...messages, { text: input, user: true }]);\r\n      setInput(''); // Réinitialiser le champ input\r\n\r\n      try {\r\n        // Requête POST vers Flask\r\n        const response = await fetch('http://127.0.0.1:5000/generate', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            role: 'friend', // Rôle ou contexte du bot\r\n            prompt: input,\r\n          }),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        // Ajouter la réponse du bot\r\n        if (data.response) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: data.response, user: false },\r\n          ]);\r\n\r\n          // nouvelle ligne : déclencher le text-to-speech pour la réponse du coach\r\n          speakCoachResponse(data.response);\r\n\r\n        } else if (data.error) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: 'Error: ' + data.error, user: false },\r\n          ]);\r\n        }\r\n      } catch (error) {\r\n        // Gérer les erreurs de connexion et variable errorMessage ajouté pour éviter la répétition du message.\r\n        const errorMessage = '오류가 발생했습니다: 서버에 연결할 수 없습니다.'//'connexion sans succès' //Error: Unable to connect to the server.\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { text: errorMessage, user: false }, \r\n        ]);\r\n        // Nouvelle ligne ajoutée pour tester la voix en cas d'erreur : Speak the error message\r\n        speakCoachResponse(errorMessage); \r\n      }\r\n    }\r\n  };\r\n\r\n  // Gestion de la touche \"Entrée\" pour envoyer un message\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // nouvelles fonctions pour le text-to-speech\r\n  \r\n  // fonction pour détecter la langue utilisée par la réponse générée\r\n  const detectLanguage = (text) => \r\n  {\r\n    if (/[\\u3131-\\uD79D]/.test(text)) return 'ko-KR'; // pour reconnaître le coréen\r\n    if (/\\b(le|la|les|un|une|des|je|tu|il|elle|nous|vous|ils|elles|et|est|sont|pas|pour|avec|sans|cette|cela|ceci|au|aux|du|de|que|qui|où|quoi|quand|comment|parce|mais|ou|donc|or|ni|car|bientôt|fête|bonjour|merci|ça)\\b|[àâçéèêëîïôûùüÿæœ]/i.test(text)) {\r\n      return 'fr-FR';}\r\n  // pour reconnaître le français\r\n    return 'en-US'; // s'il n'y a d'autres langues configurées, mettons l'anglais par défaut\r\n  }\r\n  // fonction text-to-speech (TTS) pour la voix du coach\r\n  const speakCoachResponse = (text) => {\r\n    const synth = window.speechSynthesis;\r\n    const lang = detectLanguage(text); // appel de la fonction detectLanguage\r\n\r\n    const loadAndSpeak = () => {\r\n      const voices = synth.getVoices();\r\n\r\n      if (!voices.length) {\r\n          setTimeout(loadAndSpeak, 100); // Retry after 100ms if voices are not loaded\r\n          return;\r\n      }\r\n\r\n      // Filter voices by language and characteristics\r\n      const coachVoice = voices.find(\r\n          (voice) => voice.lang === lang && \r\n                     (voice.name.toLowerCase().includes('friend') || \r\n                      voice.name.toLowerCase().includes('energetic'))\r\n      ) || voices.find(voice => voice.lang === lang) || voices[0]; // Fallback voice\r\n\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.voice = coachVoice;\r\n      utterance.pitch = 5.0;  // High pitch for motivation\r\n      utterance.rate = 1.5;   // Faster rate for dynamic tone\r\n\r\n      synth.speak(utterance);\r\n  };\r\n\r\n  loadAndSpeak();\r\n  };\r\n\r\n  // code html\r\n  return (\r\n    <div className=\"chatbot-wrapper\">\r\n      <button onClick={() => navigate('/')} className=\"back-button\">\r\n        Back to Homepage\r\n      </button>\r\n      <h1 className=\"chatbot-title\">FriendChatBot</h1>\r\n      <div className=\"chat-display\" ref={chatDisplayRef}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`chat-message ${msg.user ? 'user-message' : 'bot-message'}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message...\"\r\n          className=\"chat-input\"\r\n        />\r\n        <button\r\n          onClick={handleSendMessage}\r\n          className=\"send-button\"\r\n          disabled={!input.trim()} // Désactiver le bouton si le champ est vide\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FriendChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}