{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibate\\\\Documents\\\\oss project\\\\open-swag-software\\\\code\\\\src\\\\pages\\\\CoachChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatBot.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoachChatBot = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]); // Historique des messages\n  const [input, setInput] = useState(''); // Contenu de l'input\n  const chatDisplayRef = useRef(null); // Référence pour le défilement\n\n  // Défilement automatique vers le bas\n  useEffect(() => {\n    if (chatDisplayRef.current) {\n      chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Fonction pour envoyer un message à l'API Flask\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      // Ajouter le message utilisateur\n      setMessages([...messages, {\n        text: input,\n        user: true\n      }]);\n      setInput(''); // Réinitialiser le champ input\n\n      try {\n        // Requête POST vers Flask\n        const response = await fetch('http://127.0.0.1:5000/generate', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            role: 'Coach',\n            // Rôle ou contexte du bot\n            prompt: input\n          }),\n          mode: 'cors'\n        });\n        const data = await response.json();\n\n        // Ajouter la réponse du bot\n        if (data.response) {\n          setMessages(prevMessages => [...prevMessages, {\n            text: data.response,\n            user: false\n          }]);\n        } else if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            text: 'Error: ' + data.error,\n            user: false\n          }]);\n        }\n      } catch (error) {\n        // Gérer les erreurs de connexion\n        setMessages(prevMessages => [...prevMessages, {\n          text: 'Error: Unable to connect to the server.',\n          user: false\n        }]);\n      }\n    }\n  };\n\n  // Gestion de la touche \"Entrée\" pour envoyer un message\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/'),\n      className: \"back-button\",\n      children: \"Back to Homepage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"chatbot-title\",\n      children: \"CoachChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-display\",\n      ref: chatDisplayRef,\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.user ? 'user-message' : 'bot-message'}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        disabled: !input.trim() // Désactiver le bouton si le champ est vide\n        ,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(CoachChatBot, \"mjJC+wDY9xMEJkur+ymY1Nd+iNY=\", false, function () {\n  return [useNavigate];\n});\n_c = CoachChatBot;\nexport default CoachChatBot;\nvar _c;\n$RefreshReg$(_c, \"CoachChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","CoachChatBot","_s","navigate","messages","setMessages","input","setInput","chatDisplayRef","current","scrollTop","scrollHeight","handleSendMessage","trim","text","user","response","fetch","method","headers","body","JSON","stringify","role","prompt","mode","data","json","prevMessages","error","handleKeyPress","event","key","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","type","value","onChange","e","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ibate/Documents/oss project/open-swag-software/code/src/pages/CoachChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatBot.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CoachChatBot = () => {\r\n  const navigate = useNavigate();\r\n  const [messages, setMessages] = useState([]); // Historique des messages\r\n  const [input, setInput] = useState(''); // Contenu de l'input\r\n  const chatDisplayRef = useRef(null); // Référence pour le défilement\r\n\r\n  // Défilement automatique vers le bas\r\n  useEffect(() => {\r\n    if (chatDisplayRef.current) {\r\n      chatDisplayRef.current.scrollTop = chatDisplayRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fonction pour envoyer un message à l'API Flask\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      // Ajouter le message utilisateur\r\n      setMessages([...messages, { text: input, user: true }]);\r\n      setInput(''); // Réinitialiser le champ input\r\n\r\n      try {\r\n        // Requête POST vers Flask\r\n        const response = await fetch('http://127.0.0.1:5000/generate', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            role: 'Coach', // Rôle ou contexte du bot\r\n            prompt: input,\r\n          }),\r\n          mode: 'cors', \r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        // Ajouter la réponse du bot\r\n        if (data.response) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: data.response, user: false },\r\n          ]);\r\n        } else if (data.error) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: 'Error: ' + data.error, user: false },\r\n          ]);\r\n        }\r\n      } catch (error) {\r\n        // Gérer les erreurs de connexion\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { text: 'Error: Unable to connect to the server.', user: false },\r\n        ]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Gestion de la touche \"Entrée\" pour envoyer un message\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-wrapper\">\r\n      <button onClick={() => navigate('/')} className=\"back-button\">\r\n        Back to Homepage\r\n      </button>\r\n      <h1 className=\"chatbot-title\">CoachChatBot</h1>\r\n      <div className=\"chat-display\" ref={chatDisplayRef}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`chat-message ${msg.user ? 'user-message' : 'bot-message'}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message...\"\r\n          className=\"chat-input\"\r\n        />\r\n        <button\r\n          onClick={handleSendMessage}\r\n          className=\"send-button\"\r\n          disabled={!input.trim()} // Désactiver le bouton si le champ est vide\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoachChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}